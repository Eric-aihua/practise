/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package com.eric.concurrency;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * 
 * @author Eric
 */
public class CopyFileByMultiConcurrency extends javax.swing.JFrame {
	
	/**
	 * Creates new form CopyFileByMultiConcurrency
	 */
	
	public static final String	   SPLITE	    = "/";
	private javax.swing.JLabel	   resultField;
	private javax.swing.JLabel	   sourceField;
	private javax.swing.JLabel	   targetFiled;
	private javax.swing.JButton	   multiButton;
	private javax.swing.JButton	   singleButton;
	private javax.swing.JTextField	source;
	private javax.swing.JTextField	target;
	private static ExecutorService es = Executors.newCachedThreadPool();
	public static final int	       BUFFIZE_FIZE	= 8192;
	
	public CopyFileByMultiConcurrency() {
		initComponents();
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		
		singleButton = new javax.swing.JButton();
		multiButton = new javax.swing.JButton();
		source = new javax.swing.JTextField();
		target = new javax.swing.JTextField();
		resultField = new javax.swing.JLabel();
		sourceField = new javax.swing.JLabel();
		targetFiled = new javax.swing.JLabel();
		source.setText("D:\\video\\lover");
		target.setText("d:\\temp");
		
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("COPY FILE");
		
		singleButton.setText("Single");
		singleButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				singleActionPerformed(evt);
			}
		});
		
		multiButton.setText("Multi");
		multiButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				multiActionPerformed(evt);
			}
		});
		
		sourceField.setText("SOURCE:");
		resultField.setText("RESULT");
		targetFiled.setText("TARGRT");
		
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
		        layout.createSequentialGroup()
		                .addGroup(
		                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		                                .addGroup(
		                                        layout.createSequentialGroup().addGap(111, 111, 111).addComponent(singleButton).addGap(35, 35, 35)
		                                                .addComponent(multiButton))
		                                .addGroup(layout.createSequentialGroup().addGap(160, 160, 160).addComponent(resultField))
		                                .addGroup(
		                                        layout.createSequentialGroup()
		                                                .addGap(51, 51, 51)
		                                                .addGroup(
		                                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		                                                                .addComponent(sourceField).addComponent(targetFiled))
		                                                .addGap(18, 18, 18)
		                                                .addGroup(
		                                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                                                                .addComponent(source, javax.swing.GroupLayout.DEFAULT_SIZE, 279,
		                                                                        Short.MAX_VALUE).addComponent(target))))
		                .addContainerGap(173, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
		        javax.swing.GroupLayout.Alignment.TRAILING,
		        layout.createSequentialGroup()
		                .addGap(173, 173, 173)
		                .addGroup(
		                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
		                                .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
		                                        javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(sourceField))
		                .addGap(53, 53, 53)
		                .addGroup(
		                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
		                                .addComponent(target, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
		                                        javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(targetFiled))
		                .addGap(18, 18, 18)
		                .addComponent(resultField)
		                .addGap(15, 15, 15)
		                .addGroup(
		                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(singleButton)
		                                .addComponent(multiButton)).addContainerGap(190, Short.MAX_VALUE)));
		
		pack();
	}// </editor-fold>//GEN-END:initComponents
	
	private void singleActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_singleActionPerformed
		try {
			if (!checkFile()) {
				source.setText("");
				target.setText("");
				return;
			}
			String sourceFile = source.getText();
			String targetFile = target.getText();
			Long start = System.currentTimeMillis();
			copyDirFile(sourceFile, targetFile, true);
			resultField.setText("RESULT: finished,spend" + (System.currentTimeMillis() - start));
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}// GEN-LAST:event_singleActionPerformed
	
	private void multiActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_multiActionPerformed
		try {
			if (!checkFile()) {
				source.setText("");
				target.setText("");
				return;
			}
			String sourceFile = source.getText();
			String targetFile = target.getText();
			Long start = System.currentTimeMillis();
			copyDirFile(sourceFile, targetFile, false);
			resultField.setText("RESULT:copy finished,spend" + (System.currentTimeMillis() - start));
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
	}// GEN-LAST:event_multiActionPerformed
	
	public boolean checkFile() {
		boolean result = true;
		File sourceFile = new File(source.getText());
		File targetFile = new File(target.getText());
		if (!sourceFile.exists()) {
			resultField.setText("RESULT:please to check source file path!");
			result = false;
			
			if (!targetFile.exists()) {
				resultField.setText("RESULT:please to check target file path!");
				result = false;
			}
		}
		return result;
	}
	
	public static boolean copyDirFile(String source, String destdir, boolean isSingle) throws FileNotFoundException, IOException {
		try {
			if (source == null || source.trim().equals("")) {
				return false;
			}
			File sDir = new File(source.trim());
			// source file not a directory
			if (sDir.isFile()) {
				StringBuilder dest = new StringBuilder(destdir);
				String[] filePathSplite = sDir.getAbsolutePath().replace("\\", SPLITE).split(SPLITE);
				genDirPath(dest, filePathSplite);
				copyFile(sDir.getAbsolutePath(), dest.toString().trim());
			} else {
				File[] filelist = sDir.listFiles();
				// iterator directory
				for (int i = 0; i < filelist.length; i++) {
					File sourceFile = filelist[i];
					if (!sourceFile.isDirectory()) {
						StringBuilder dest = new StringBuilder(destdir);
						String[] filePathSplite = sourceFile.getAbsolutePath().replace("\\", SPLITE).split(SPLITE);
						genDirPath(dest, filePathSplite);
						if (isSingle) {
							copyFile(sourceFile.getAbsolutePath(), dest.toString().trim());
						} else {
							es.execute(new CopyFileHandler(sourceFile.getAbsolutePath(), dest.toString().trim()));
						}
					} else if (sourceFile.isDirectory()) {
						// source file is directory
						copyDirFile(filelist[i].getPath(), destdir, isSingle);
					}
				}
				
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("readfile() Exception:" + e.getMessage());
		}
		return true;
	}
	
	public static void copyFile(String srcPath, String destPath) throws IOException {
		File srcFile = new File(srcPath);
		File destFile = new File(destPath);
		if (destFile.exists()) {
			boolean d = destFile.delete();
			
			if (d) {
				System.out.print("delete successful！");
			} else {
				System.out.print("delete failed！");
			}
		}
		FileInputStream sourStream = new FileInputStream(srcFile);
		try {
			FileOutputStream descStream = new FileOutputStream(destFile);
			try {
				byte[] buffer = new byte [BUFFIZE_FIZE];
				int n = 0;
				while (-1 != (n = sourStream.read(buffer))) {
					descStream.write(buffer, 0, n);
				}
				System.out.println("Copy Successful::" + destPath);
			} finally {
				try {
					if (descStream != null) {
						descStream.close();
					}
				} catch (IOException ioe) {
					ioe.printStackTrace();
				}
			}
		} finally {
			try {
				if (sourStream != null) {
					sourStream.close();
				}
			} catch (IOException ioe) {
				System.out.println("failed src file:" + srcPath + " reason:" + ioe.getMessage());
			}
		}
	}
	
	private static void genDirPath(StringBuilder destDir, String[] filePathSplite) {
		// begin with i
		for (int i = 2; i < filePathSplite.length; i++) {
			destDir.append(SPLITE + filePathSplite[i]);
			if (i < filePathSplite.length - 1) {
				new File(destDir.toString().trim()).mkdir();
			}
		}
	}
	
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/*
		 * Set the Nimbus look and feel
		 */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CopyFileByMultiConcurrency.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CopyFileByMultiConcurrency.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CopyFileByMultiConcurrency.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CopyFileByMultiConcurrency.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
		
		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {
			
			public void run() {
				
				new CopyFileByMultiConcurrency().setVisible(true);
			}
		});
	}
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	
	// End of variables declaration//GEN-END:variables
}
