/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.eric.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -924659274939759343L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyRecord\",\"namespace\":\"com.eric.avro\",\"fields\":[{\"name\":\"timestamp_with_logical_type\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"timestamp_no_logical_type\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<MyRecord> ENCODER =
      new BinaryMessageEncoder<MyRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyRecord> DECODER =
      new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MyRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MyRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MyRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MyRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MyRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MyRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MyRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.time.Instant timestamp_with_logical_type;
  @Deprecated public long timestamp_no_logical_type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyRecord() {}

  /**
   * All-args constructor.
   * @param timestamp_with_logical_type The new value for timestamp_with_logical_type
   * @param timestamp_no_logical_type The new value for timestamp_no_logical_type
   */
  public MyRecord(java.time.Instant timestamp_with_logical_type, java.lang.Long timestamp_no_logical_type) {
    this.timestamp_with_logical_type = timestamp_with_logical_type.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.timestamp_no_logical_type = timestamp_no_logical_type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp_with_logical_type;
    case 1: return timestamp_no_logical_type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp_with_logical_type = (java.time.Instant)value$; break;
    case 1: timestamp_no_logical_type = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp_with_logical_type' field.
   * @return The value of the 'timestamp_with_logical_type' field.
   */
  public java.time.Instant getTimestampWithLogicalType() {
    return timestamp_with_logical_type;
  }


  /**
   * Sets the value of the 'timestamp_with_logical_type' field.
   * @param value the value to set.
   */
  public void setTimestampWithLogicalType(java.time.Instant value) {
    this.timestamp_with_logical_type = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'timestamp_no_logical_type' field.
   * @return The value of the 'timestamp_no_logical_type' field.
   */
  public long getTimestampNoLogicalType() {
    return timestamp_no_logical_type;
  }


  /**
   * Sets the value of the 'timestamp_no_logical_type' field.
   * @param value the value to set.
   */
  public void setTimestampNoLogicalType(long value) {
    this.timestamp_no_logical_type = value;
  }

  /**
   * Creates a new MyRecord RecordBuilder.
   * @return A new MyRecord RecordBuilder
   */
  public static com.eric.avro.MyRecord.Builder newBuilder() {
    return new com.eric.avro.MyRecord.Builder();
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static com.eric.avro.MyRecord.Builder newBuilder(com.eric.avro.MyRecord.Builder other) {
    if (other == null) {
      return new com.eric.avro.MyRecord.Builder();
    } else {
      return new com.eric.avro.MyRecord.Builder(other);
    }
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing MyRecord instance.
   * @param other The existing instance to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static com.eric.avro.MyRecord.Builder newBuilder(com.eric.avro.MyRecord other) {
    if (other == null) {
      return new com.eric.avro.MyRecord.Builder();
    } else {
      return new com.eric.avro.MyRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for MyRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyRecord>
    implements org.apache.avro.data.RecordBuilder<MyRecord> {

    private java.time.Instant timestamp_with_logical_type;
    private long timestamp_no_logical_type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.eric.avro.MyRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp_with_logical_type)) {
        this.timestamp_with_logical_type = data().deepCopy(fields()[0].schema(), other.timestamp_with_logical_type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp_no_logical_type)) {
        this.timestamp_no_logical_type = data().deepCopy(fields()[1].schema(), other.timestamp_no_logical_type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing MyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.eric.avro.MyRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp_with_logical_type)) {
        this.timestamp_with_logical_type = data().deepCopy(fields()[0].schema(), other.timestamp_with_logical_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp_no_logical_type)) {
        this.timestamp_no_logical_type = data().deepCopy(fields()[1].schema(), other.timestamp_no_logical_type);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp_with_logical_type' field.
      * @return The value.
      */
    public java.time.Instant getTimestampWithLogicalType() {
      return timestamp_with_logical_type;
    }


    /**
      * Sets the value of the 'timestamp_with_logical_type' field.
      * @param value The value of 'timestamp_with_logical_type'.
      * @return This builder.
      */
    public com.eric.avro.MyRecord.Builder setTimestampWithLogicalType(java.time.Instant value) {
      validate(fields()[0], value);
      this.timestamp_with_logical_type = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp_with_logical_type' field has been set.
      * @return True if the 'timestamp_with_logical_type' field has been set, false otherwise.
      */
    public boolean hasTimestampWithLogicalType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp_with_logical_type' field.
      * @return This builder.
      */
    public com.eric.avro.MyRecord.Builder clearTimestampWithLogicalType() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp_no_logical_type' field.
      * @return The value.
      */
    public long getTimestampNoLogicalType() {
      return timestamp_no_logical_type;
    }


    /**
      * Sets the value of the 'timestamp_no_logical_type' field.
      * @param value The value of 'timestamp_no_logical_type'.
      * @return This builder.
      */
    public com.eric.avro.MyRecord.Builder setTimestampNoLogicalType(long value) {
      validate(fields()[1], value);
      this.timestamp_no_logical_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp_no_logical_type' field has been set.
      * @return True if the 'timestamp_no_logical_type' field has been set, false otherwise.
      */
    public boolean hasTimestampNoLogicalType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp_no_logical_type' field.
      * @return This builder.
      */
    public com.eric.avro.MyRecord.Builder clearTimestampNoLogicalType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyRecord build() {
      try {
        MyRecord record = new MyRecord();
        record.timestamp_with_logical_type = fieldSetFlags()[0] ? this.timestamp_with_logical_type : (java.time.Instant) defaultValue(fields()[0]);
        record.timestamp_no_logical_type = fieldSetFlags()[1] ? this.timestamp_no_logical_type : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyRecord>
    READER$ = (org.apache.avro.io.DatumReader<MyRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










